TASK-1
#VERILOG CODE
module ALU (
    input [3:0] A, B,
    input [2:0] ALU_Sel,  // Selection line for operation
    output reg [3:0] ALU_Out
);

always @(*) begin
    case(ALU_Sel)
        3'b000: ALU_Out = A + B;   // Addition
        3'b001: ALU_Out = A - B;   // Subtraction
        3'b010: ALU_Out = A & B;   // AND
        3'b011: ALU_Out = A | B;   // OR
        3'b100: ALU_Out = ~A;      // NOT (only A considered)
        default: ALU_Out = 4'b0000;
    endcase
end

endmodule
#TEST BENCH
`timescale 1ns / 1ps



module ALU_tb;

    reg [3:0] A, B;

    reg [2:0] ALU_Sel;

    wire [3:0] ALU_Out;

    

    // Instantiate the ALU module

    ALU uut (

        .A(A),

        .B(B),

        .ALU_Sel(ALU_Sel),

        .ALU_Out(ALU_Out)

    );

    

    initial begin

        // Monitor the signals

        $monitor("Time=%0t | A=%b, B=%b, ALU_Sel=%b, ALU_Out=%b", $time, A, B, ALU_Sel, ALU_Out);

        

        // Test Case 1: Addition

        A = 4'b0011; B = 4'b0001; ALU_Sel = 3'b000;

        #10;

        

        // Test Case 2: Subtraction

        A = 4'b0100; B = 4'b0001; ALU_Sel = 3'b001;

        #10;

        

        // Test Case 3: AND Operation

        A = 4'b1100; B = 4'b1010; ALU_Sel = 3'b010;

        #10;

        

        // Test Case 4: OR Operation

        A = 4'b1100; B = 4'b1010; ALU_Sel = 3'b011;

        #10;

        

        // Test Case 5: NOT Operation (only A is considered)

        A = 4'b1010; B = 4'b0000; ALU_Sel = 3'b100;

        #10;

        

        // Test Case 6: Default Case

        A = 4'b1111; B = 4'b1111; ALU_Sel = 3'b111;

        #10;

        

        // End Simulation

        $stop;

    end

endmodule
